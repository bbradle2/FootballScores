@page "/"
@inject HttpClient Http
@*@inject IJSRuntime JSRuntime*@
@inject Services.BlazorTimer Timer
@implements IDisposable


@using DevExpress.Blazor;
@using FootballScores.Components;
@using Newtonsoft.Json;
@using System.Net.Http.Headers;

@if (ShowAPTop25ModalVisible)
{
    <DxPopup CssClass="custom-popup" @bind-Visible="@ShowAPTop25ModalVisible">
        <HeaderTemplate>
            <div class="custom-header bg-white text-dark w-100">
                <a class="close-button oi oi-x text-dark" href="javascript:;" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => ShowAPTop25ModalVisible = false)"></a>
            </div>
        </HeaderTemplate>

        <Content>
            <DxDataGrid @ref="@gridRefTop25"
                        ShowFilterRow="false"
                        SelectionMode="DataGridSelectionMode.None"
                        AllowSort="@false"
                        HtmlDataCellDecoration="@OnHtmlDataCellDecoration"
                        CssClass="mw-1100"
                        Data="@top25APGamesRegularSeason"
                        AllowColumnDragDrop="@false"
                        >
                <HeaderTemplate>
                    <center><h1>Top 25 For Week @top25APGamesRegularSeason.FirstOrDefault().week</h1></center>
                </HeaderTemplate>

                <Columns>
                    @*<MyDxDataGridIntComboBoxColumn Field="@nameof(Game.week)"
                                                   Caption="Week"
                                                   Data="@regularWeeks"
                                                   FilteringMode="DataGridFilteringMode.Contains"
                                                   Width="15px"
                                                   IntialFilter="@defaultRegularWeek"
                                                   AllowFilter="false">
                    </MyDxDataGridIntComboBoxColumn>*@
                    <MyDxDateGridColumn EnableDates="@enabledDatesReg"
                                        Caption="Date" Field="@nameof(Game.start_date)"
                                        DisplayFormat="f"
                                        Width="275px"
                                        AllowFilter="false">

                    </MyDxDateGridColumn>
                    <DxDataGridComboBoxColumn Field="@nameof(Game.away_team)"
                                              Caption="Away Team"
                                              Data="@teamsRegular"
                                              ValueFieldName="@nameof(Team.school)"
                                              TextFieldName="@nameof(Team.school)"
                                              FilteringMode="DataGridFilteringMode.Contains"
                                              Width="250px">

                        <DisplayTemplate>
                            @{
                                @RenderTeamGridCell((Game)context, false, regularRankings);
                            }
                        </DisplayTemplate>
                    </DxDataGridComboBoxColumn>
                    <DxDataGridColumn Caption="Score"
                                      Field="@nameof(Game.away_points)"
                                      AllowFilter="@false"
                                      Width="20px" />
                    <DxDataGridComboBoxColumn Field="@nameof(Game.home_team)"
                                              Caption="Home Team"
                                              Data="@teamsRegular"
                                              ValueFieldName="@nameof(Team.school)"
                                              TextFieldName="@nameof(Team.school)"
                                              FilteringMode="DataGridFilteringMode.Contains"
                                              Width="250px">

                        <DisplayTemplate>
                            @{
                                @RenderTeamGridCell((Game)context, true, regularRankings);
                            }
                        </DisplayTemplate>
                    </DxDataGridComboBoxColumn>
                    <DxDataGridColumn Caption="Score"
                                      Field="@nameof(Game.home_points)"
                                      AllowFilter="@false"
                                      Width="20px" />

                </Columns>
            </DxDataGrid>
        </Content>
    </DxPopup>
}

@if (DetailPopupVisible)
{

    var team = teamsRegular.Where((s) => s.id == teamSelectedId).FirstOrDefault();
    //var gamesForTeamRegularSeason = gamesRegularSeason.Where((s) => (s.home_id == teamSelectedId || s.away_id == teamSelectedId) && s.season == seasonSelected).OrderBy((s) => s.start_date).OrderBy((s) => s.week).ToList();
    var gamesForTeamRegularSeason = gamesRegularSeason.Where((s) => (s.home_id == teamSelectedId || s.away_id == teamSelectedId) && s.season == seasonSelected).OrderBy((s) => s.week).ToList();
    var gamesForTeamPostSeason = gamesPostSeason.Where((s) => (s.home_id == teamSelectedId || s.away_id == teamSelectedId) && s.season == seasonSelected).OrderBy((s) => s.start_date).ToList();
    int gamesWon = 0;
    int gamesLost = 0;
    string logo = null;
    List<RenderFragment> lstRegularRender = new List<RenderFragment>();
    List<RenderFragment> lstPostRender = new List<RenderFragment>();
    int colSpan = 5;
    string cellstyle = "text-align:right";

    if (team.logos != null)
    {
        logo = team.logos[0];
    }
    else
    {
        logo = "blank.png";
    }

    lstRegularRender.Clear();
    lstPostRender.Clear();

    @foreach (var game in gamesForTeamRegularSeason)
    {
        bool gameInRange = game.start_date < DateTime.Now;
        string gameDate = game.start_date.ToString("ddd MM/dd/yyyy hh:mm tt");
        string gameWeek = string.Empty;

        //if (gameInRange)
            gameWeek = "Week " + @game.week;

        if (game.home_id == teamSelectedId)
        {
            if (game.home_points > game.away_points)
            {
                lstRegularRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6><b>@team.school</b></h6></td><td style=@cellstyle><h6><b>@game.home_points</b></h6></td><td><h6>@teamsRegular.Where((s) => s.id == game.away_id).FirstOrDefault().school</h6></td><td style=@cellstyle><h6>@game.away_points</h6></td></tr>);
                if (gameInRange)
                    gamesWon++;
            }
            else if (game.home_points < game.away_points)
            {
                lstRegularRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6>@team.school</h6></td><td style=@cellstyle><h6>@game.home_points</h6></td><td><h6><b>@teamsRegular.Where((s) => s.id == game.away_id).FirstOrDefault().school</b></h6></td><td style=@cellstyle><h6><b>@game.away_points</b></h6></td></tr>);
                if (gameInRange)
                    gamesLost++;
            }
            else 
            {
                lstRegularRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6>@team.school</h6></td><td style=@cellstyle><h6>@game.home_points</h6></td><td><h6>@teamsRegular.Where((s) => s.id == game.away_id).FirstOrDefault().school</h6></td><td style=@cellstyle><h6>@game.away_points</h6></td></tr>);
            }
        }
        else
        {
            if (game.away_points > game.home_points)
            {
                lstRegularRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6><b>@team.school @@</b></h6></td><td style=@cellstyle><h6><b>@game.away_points</b></h6></td><td><h6>@teamsRegular.Where((s) => s.id == game.home_id).FirstOrDefault().school</h6></td><td style=@cellstyle><h6>@game.home_points</h6></td></tr>);
                if (gameInRange)
                    gamesWon++;
            }
            else if (game.away_points < game.home_points)
            {
                lstRegularRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6>@team.school @@</h6></td><td style=@cellstyle><h6>@game.away_points</h6></td><td><h6><b>@teamsRegular.Where((s) => s.id == game.home_id).FirstOrDefault().school</b></h6></td><td style=@cellstyle><h6><b>@game.home_points</b></h6></td></tr>);
                if (gameInRange)
                    gamesLost++;
            } 
            else
            {
                lstRegularRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6>@team.school @@</h6></td><td style=@cellstyle><h6>@game.away_points</h6></td><td><h6>@teamsRegular.Where((s) => s.id == game.home_id).FirstOrDefault().school</h6></td><td style=@cellstyle><h6>@game.home_points</h6></td></tr>);
            }
        }
    }


    @foreach (var game in gamesForTeamPostSeason)
    {
        bool gameInRange = game.start_date < DateTime.Now;
        string gameDate = game.start_date.ToString("ddd MM/dd/yyyy hh:mm tt");
        string gameWeek = "Week " + @game.week;

        if (game.home_points > 0 && game.away_points > 0)
        {
            if (game.home_id == teamSelectedId)
            {
                if (game.home_points > game.away_points)
                {
                    lstPostRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6><b>@team.school</b></h6></td><td style=@cellstyle><h6><b>@game.home_points</b></h6></td><td><h6>@teamsRegular.Where((s) => s.id == game.away_id).FirstOrDefault().school</h6></td><td style=@cellstyle><h6>@game.away_points</h6></td></tr>);
                    if (gameInRange)
                        gamesWon++;
                }
                else
                {
                    lstPostRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6>@team.school</h6></td><td style=@cellstyle><h6>@game.home_points</h6></td><td><h6><b>@teamsRegular.Where((s) => s.id == game.away_id).FirstOrDefault().school</b></h6></td><td style=@cellstyle><h6><b>@game.away_points</b></h6></td></tr>);
                    if (gameInRange)
                        gamesLost++;
                }
            }
            else
            {
                if (game.away_points > game.home_points)
                {
                    lstPostRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6><b>@team.school @@</b></h6></td><td style=@cellstyle><h6><b>@game.away_points</b></h6></td><td><h6>@teamsRegular.Where((s) => s.id == game.home_id).FirstOrDefault().school</h6></td><td style=@cellstyle><h6>@game.home_points</h6></td></tr>);
                    if (gameInRange)
                        gamesWon++;
                }
                else
                {
                    lstPostRender.Add(@<tr><td><h6>@gameDate</h6></td><td><h6>@gameWeek</h6></td><td><h6>@team.school @@</h6></td><td style=@cellstyle><h6>@game.away_points</h6></td><td><h6><b>@teamsRegular.Where((s) => s.id == game.home_id).FirstOrDefault().school</b></h6></td><td style=@cellstyle><h6><b>@game.home_points</b></h6></td></tr>);
                    if (gameInRange)
                        gamesLost++;
                }
            }
        }
    }

    <DxPopup CssClass="custom-popup" @bind-Visible="@DetailPopupVisible">
        <HeaderTemplate>
            <div class="custom-header bg-white text-dark w-100">
                <span style="margin-left:5px"><img width="35" height="35" src="@logo" /></span>
                <a class="close-button oi oi-x text-dark" href="javascript:;" aria-hidden="true" role="button" aria-label="Close popup" @onclick="@(() => DetailPopupVisible = false)"></a>
            </div>
        </HeaderTemplate>

        <Content>
            <table>
                <tr><td colspan=@colSpan><h3><b>@team.school (@team.conference) @seasonSelected Schedule (@gamesWon - @gamesLost)</b></h3></td></tr>
                <tr><td colspan=@colSpan><hr /></td></tr>

                @if (lstRegularRender.Count > 0)
                {
                    <tr><td colspan=@colSpan><br /></td></tr>
                    <tr><td colspan=@colSpan><h5><b>Regular Season</b></h5></td></tr>
                    <tr><td colspan=@colSpan><hr /></td></tr>

                    @foreach (RenderFragment r in lstRegularRender)
                    {
                        @r;
                    }
                }

                @if (lstPostRender.Count > 0)
                {
                    <tr><td colspan=@colSpan><br /></td></tr>
                    <tr><td colspan=@colSpan><h5><b>Post Season</b></h5></td></tr>
                    <tr><td colspan=@colSpan><hr /></td></tr>

                    @foreach (RenderFragment r in lstPostRender)
                    {
                        @r;
                    }
                }
            </table>
        </Content>

    </DxPopup>

}


@if (LoadingPopupVisible)
{
    <h4 style="font-weight:bolder;align-content:center;align-items:center;vertical-align:central;text-align:center;align-self:center">
        @LoadingMessage
    </h4>
}
else
{

    <DxDataGrid @ref="@gridRefRegular"
                VerticalScrollableHeight="300"
                ShowFilterRow="true"
                SelectionMode="DataGridSelectionMode.None"
                AllowSort="@false"
                HtmlDataCellDecoration="@OnHtmlDataCellDecoration"
                CssClass="mw-1100"
                Data="@gamesRegularSeason"
                AllowColumnDragDrop="@false"
                PageSize="5">
        <HeaderTemplate>
            <DxButton RenderStyle="ButtonRenderStyle.Light" Title="Click for Top 25 Games." Text="Top 25" @onclick="(() => ShowAPTop25ModalVisible = true)"></DxButton>
            <center><h1>Regular Season</h1></center>
        </HeaderTemplate>

        <Columns>


            <MyDxDataGridIntComboBoxColumn Field="@nameof(Game.season)"
                                           Caption="Season"
                                           Data="@regularSeasons"
                                           FilteringMode="DataGridFilteringMode.Contains"
                                           Width="15px"
                                           IntialFilter=@(regularSeasons.Max())>
            </MyDxDataGridIntComboBoxColumn>
            <MyDxDataGridIntComboBoxColumn Field="@nameof(Game.week)"
                                           Caption="Week"
                                           Data="@regularWeeks"
                                           FilteringMode="DataGridFilteringMode.Contains"
                                           Width="15px"
                                           IntialFilter="@defaultRegularWeek">
            </MyDxDataGridIntComboBoxColumn>
            <MyDxDateGridColumn EnableDates="@enabledDatesReg"
                                Caption="Date" Field="@nameof(Game.start_date)"
                                DisplayFormat="f"
                                Width="125px">

            </MyDxDateGridColumn>
            <DxDataGridComboBoxColumn Field="@nameof(Game.away_team)"
                                      Caption="Away Team"
                                      Data="@teamsRegular"
                                      ValueFieldName="@nameof(Team.school)"
                                      TextFieldName="@nameof(Team.school)"
                                      FilteringMode="DataGridFilteringMode.Contains"
                                      Width="250px">

                <DisplayTemplate>
                    @{
                        @RenderTeamGridCell((Game)context, false, regularRankings);
                    }
                </DisplayTemplate>
            </DxDataGridComboBoxColumn>
            <DxDataGridColumn Caption="Score"
                              Field="@nameof(Game.away_points)"
                              AllowFilter="@false"
                              Width="20px" />
            @*<DxDataGridColumn Caption="@ast" Field="@nameof(Game.ast)" AllowFilter="@false" Width="25px"/>*@
            <DxDataGridComboBoxColumn Field="@nameof(Game.home_team)"
                                      Caption="Home Team"
                                      Data="@teamsRegular"
                                      ValueFieldName="@nameof(Team.school)"
                                      TextFieldName="@nameof(Team.school)"
                                      FilteringMode="DataGridFilteringMode.Contains"
                                      Width="250px">

                <DisplayTemplate>
                    @{
                        @RenderTeamGridCell((Game)context, true, regularRankings);
                    }
                </DisplayTemplate>
            </DxDataGridComboBoxColumn>
            <DxDataGridColumn Caption="Score"
                              Field="@nameof(Game.home_points)"
                              AllowFilter="@false"
                              Width="20px" />

        </Columns>
    </DxDataGrid>

    @GridMargin("60px", "60px");

    <DxDataGrid @ref="@gridRefPost"
                VerticalScrollableHeight="300"
                ShowFilterRow="@true"
                SelectionMode="DataGridSelectionMode.None"
                AllowSort="@false"
                HtmlDataCellDecoration="@OnHtmlDataCellDecoration"
                CssClass="mw-1100"
                Data="@gamesPostSeason"
                AllowColumnDragDrop="@false"
                PageSize="5">
        <HeaderTemplate>
            <center><h1>Post Season</h1></center>
        </HeaderTemplate>

        <Columns>
            <MyDxDataGridIntComboBoxColumn Field="@nameof(Game.season)"
                                           Caption="Season"
                                           Data="@postSeasons"
                                           FilteringMode="DataGridFilteringMode.Contains"
                                           Width="15px"
                                           IntialFilter=@(postSeasons.Max())>
            </MyDxDataGridIntComboBoxColumn>
            <MyDxDataGridIntComboBoxColumn Field="@nameof(Game.week)"
                                           Caption="Week"
                                           Data="@postWeeks"
                                           FilteringMode="DataGridFilteringMode.Contains"
                                           Width="15px"
                                           IntialFilter=@(postWeeks.Max())>
            </MyDxDataGridIntComboBoxColumn>
            <MyDxDateGridColumn EnableDates="@enabledDatesPost"
                                Caption="Date"
                                Field="@nameof(Game.start_date)"
                                DisplayFormat="f"
                                Width="125px"
                                AllowFilter="@false" />
            <DxDataGridComboBoxColumn Field="@nameof(Game.away_team)"
                                      Caption="Away Team"
                                      Data="@teamsPost"
                                      ValueFieldName="@nameof(Team.school)"
                                      TextFieldName="@nameof(Team.school)"
                                      FilteringMode="DataGridFilteringMode.Contains"
                                      Width="250px">

                <DisplayTemplate>
                    @{
                        @RenderTeamGridCell((Game)context, false, postRankings);
                    }
                </DisplayTemplate>
            </DxDataGridComboBoxColumn>
            <DxDataGridColumn Caption="Score"
                              Field="@nameof(Game.away_points)"
                              AllowFilter="@false"
                              Width="20px" />
            @*<DxDataGridColumn Caption="@ast" Field="@nameof(Game.ast)" AllowFilter="@false" />*@
            <DxDataGridComboBoxColumn Field="@nameof(Game.home_team)"
                                      Caption="Home Team"
                                      Data="@teamsPost"
                                      ValueFieldName="@nameof(Team.school)"
                                      TextFieldName="@nameof(Team.school)"
                                      FilteringMode="DataGridFilteringMode.Contains"
                                      Width="250px">

                <DisplayTemplate>
                    @{
                        @RenderTeamGridCell((Game)context, true, postRankings);
                    }
                </DisplayTemplate>
            </DxDataGridComboBoxColumn>
            <DxDataGridColumn Caption="Score"
                              Field="@nameof(Game.home_points)"
                              AllowFilter="@false"
                              Width="20px" />
        </Columns>
    </DxDataGrid>

    @GridMargin("60px", "60px");

}

@code
{
    //private const string ast = "@";
    private bool DetailPopupVisible { get; set; } = false;
    private bool ShowAPTop25ModalVisible { get; set; } = false;
    private int? teamSelectedId = 0;
    private int? seasonSelected = 0;
    //private static bool AlreadyLoaded;
    private bool LoadingPopupVisible { get; set; } = false;
    private int defaultRegularWeek = 1;
    private DxDataGrid<Game> gridRefRegular;
    private DxDataGrid<Game> gridRefPost;
    private DxDataGrid<Game> gridRefTop25;
    private string LoadingMessage;

    private List<Game> gamesRegularSeason = new List<Game>();
    private List<Game> gamesPostSeason = new List<Game>();
    private List<Team> teamsRegular = new List<Team>();
    private List<Team> teamsPost = new List<Team>();

    private List<Ranking> regularRankings = new List<Ranking>();
    private List<Ranking> postRankings = new List<Ranking>();
    private List<string> conferences = new List<string>();
    private List<string> divisions = new List<string>();
    private List<string> teamNames = new List<string>();
    private List<int> regularSeasons = new List<int>();
    private List<int> postSeasons = new List<int>();
    private List<int> regularWeeks = new List<int>();
    private List<int> postWeeks = new List<int>();
    private List<Record> records = new List<Record>();
    private List<DateTime?> enabledDatesReg = new List<DateTime?>();
    private List<DateTime?> enabledDatesPost = new List<DateTime?>();
    private List<Game> top25APGamesRegularSeason = new List<Game>();
    //private List<Game> rankedGamesPostSeason = new List<Game>();


    private void StartTimer()
    {
        int millis = 5000;

        Timer.SetTimer(millis);
        Timer.OnElapsed += TimerElapsedHandler;

        //Console.WriteLine($"Timer Started and set to {millis/1000} seconds");
    }

    private void TimerElapsedHandler()
    {
        Console.WriteLine("Timer Elapsed.");
        //foreach (var gamed in gamesRegularSeason)
        //{
        //    gamed.home_points += 1;
        //    gamed.away_points += 1;
        //}

        //InvokeAsync(() =>
        //{
        //    StateHasChanged();
        //    gridRefRegular.Refresh();
        //});

        GC.Collect(2, GCCollectionMode.Forced);
    }

    protected async Task LoadDataFromWeb()
    {
        //path to files
        string path = null;

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "cskUHKZR7g0PyKTQLJupMi+C6kwgbVf+7O/Io0BYk8F7KCg8X5/9mvVGY5dy+v96");
        if (Environment.OSVersion.Platform == PlatformID.Unix)
        {
            path = Environment.CurrentDirectory;
        }
        else
        {
            path = System.Reflection.Assembly.GetExecutingAssembly().Location;
            path = System.IO.Path.GetDirectoryName(path);
        }


        var teamsTask = Task.Run(() =>
        {
            Console.WriteLine("Started Loading Teams From Web.");
            teamsRegular = Http.GetJsonAsync<List<Team>>("https://api.collegefootballdata.com/teams").Result;
            teamsPost.AddRange(teamsRegular);
            Console.WriteLine("Finished Loading Teams From Web.");


            //var txt = JsonConvert.SerializeObject(teamsRegular);
            //Console.WriteLine($"Started Writing Regular Season Teams To {path}/FootballData/teamsRegular.json.");
            //System.IO.File.WriteAllTextAsync($"{path}/FootballData/teamsRegular.json", txt);


            //txt = JsonConvert.SerializeObject(teamsPost);
            //Console.WriteLine($"Started Writing Post Season Teams To {path}/FootballData/teamsRegular.json.");
            //System.IO.File.WriteAllTextAsync($"{path}/FootballData/teamsPost.json", txt);

        });

        Console.WriteLine(path);
        teamsTask.Wait();
        teamsTask = null;

        for (int i = 2021; i <= DateTime.Now.Year + 1; i++)
        {

            var gamesTask = Task.Run(() =>
            {

                List<Task> tasks = new List<Task>();

                var gpTask = Task.Run(() =>
                {
                    gamesPostSeason.AddRange(Http.GetJsonAsync<List<Game>>($"https://api.collegefootballdata.com/games?year={i}&seasonType=postseason").Result);
                });
                tasks.Add(gpTask);
                gpTask.Wait();

                var rrTask = Task.Run(() =>
                {
                    regularRankings.AddRange(Http.GetJsonAsync<List<Ranking>>($"https://api.collegefootballdata.com/rankings?year={i}&seasonType=regular").Result);
                });
                tasks.Add(rrTask);

                var prTask = Task.Run(() =>
                {
                    postRankings.AddRange(Http.GetJsonAsync<List<Ranking>>($"https://api.collegefootballdata.com/rankings?year={i}&seasonType=postseason").Result);
                });
                tasks.Add(prTask);

                var grTask = Task.Run(() =>
                {
                    gamesRegularSeason.AddRange(Http.GetJsonAsync<List<Game>>($"https://api.collegefootballdata.com/games?year={i}&seasonType=regular").Result);
                });
                tasks.Add(grTask);

                var recTask = Task.Run(() =>
                {
                    records.AddRange(Http.GetJsonAsync<List<Record>>($"https://api.collegefootballdata.com/records?year={i}").Result);
                });
                tasks.Add(recTask);

                Task.WaitAll(tasks.ToArray());

                for (int i = 0; i < tasks.Count; i++)
                {
                    tasks[i].Dispose();
                    tasks[i] = null;
                }

                tasks.Clear();
                tasks = null;

            });

            await Task.Delay(1);
            LoadingMessage = $"Loading Data for Year {i}";
            StateHasChanged();

            gamesTask.Wait();
            gamesTask = null;

        }

        var txt = JsonConvert.SerializeObject(gamesRegularSeason);
        await System.IO.File.WriteAllTextAsync($"{path}/FootballData/gamesRegularSeason.json", txt);

        txt = JsonConvert.SerializeObject(gamesPostSeason);
        await System.IO.File.WriteAllTextAsync($"{path}/FootballData/gamesPostSeason.json", txt);

        txt = JsonConvert.SerializeObject(regularRankings);
        await System.IO.File.WriteAllTextAsync($"{path}/FootballData/regularRankings.json", txt);

        txt = JsonConvert.SerializeObject(postRankings);
        await System.IO.File.WriteAllTextAsync($"{path}/FootballData/postRankings.json", txt);

        txt = JsonConvert.SerializeObject(records);
        await System.IO.File.WriteAllTextAsync($"{path}/FootballData/records.json", txt);


    }

    protected override async Task OnInitializedAsync()
    {

        LoadingPopupVisible = true;

        LoadingMessage = $"Loading College Football Data...";
        StateHasChanged();



        //if (AlreadyLoaded)
        //{
        //    GC.Collect();
        //    LoadingPopupVisible = false;
        //    return;
        //}



        //await LoadDataFromWeb();

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", "cskUHKZR7g0PyKTQLJupMi+C6kwgbVf+7O/Io0BYk8F7KCg8X5/9mvVGY5dy+v96");
        //string path = null;

        //if (Environment.OSVersion.Platform == PlatformID.Unix)
        //{
        //    path = Environment.CurrentDirectory;
        //}
        //else
        //{
        //    path = System.Reflection.Assembly.GetExecutingAssembly().Location;
        //    path = System.IO.Path.GetDirectoryName(path);
        //}

        //To get the location the assembly normally resides on disk or the install directory

        //Console.WriteLine(path);

        //once you have the path you get the directory with:


        //teamsRegular = JsonConvert.DeserializeObject<List<Team>>(System.IO.File.ReadAllText($"{path}/FootballData/teamsRegular.json"));
        teamsRegular = await Http.GetJsonAsync<List<Team>>("https://api.collegefootballdata.com/teams");
        teamsPost.AddRange(teamsRegular);

        for (int i = 2020; i <= DateTime.Now.Year; i++)
        {

            gamesRegularSeason.AddRange(await Http.GetJsonAsync<List<Game>>($"https://api.collegefootballdata.com/games?year={i}&seasonType=regular"));
            gamesPostSeason.AddRange(await Http.GetJsonAsync<List<Game>>($"https://api.collegefootballdata.com/games?year={i}&seasonType=postseason"));
            regularRankings.AddRange(await Http.GetJsonAsync<List<Ranking>>($"https://api.collegefootballdata.com/rankings?year={i}&seasonType=regular"));
            postRankings.AddRange(await Http.GetJsonAsync<List<Ranking>>($"https://api.collegefootballdata.com/rankings?year={i}&seasonType=postseason"));
            records.AddRange(await Http.GetJsonAsync<List<Record>>($"https://api.collegefootballdata.com/records?year={i}"));

            LoadingMessage = $"Loading Data for Year {i}";
            StateHasChanged();
        }

        gamesRegularSeason = gamesRegularSeason.OrderBy((s) => s.start_date).ToList();
        var maxYear = gamesRegularSeason.Max((s) => s.start_date).Year;
        var maxWeek = gamesRegularSeason.Max((s) => s.week);
        //var maxPostSeason = gamesPostSeason.Max((s) => s.season);

        var currentDate = DateTime.Now;

        if (gamesRegularSeason.Find((s) => s.start_date.Year == currentDate.Year) != null)
        {
            var currentGame = gamesRegularSeason.Find((s) => s.start_date.Year == currentDate.Year && s.start_date.Month == currentDate.Month && s.start_date.Day == currentDate.Day);
            if (currentGame != null)
            {
                defaultRegularWeek = currentGame.week;
            }
            else
            {
                while (true)
                {
                    var foundGame = gamesRegularSeason.Find((s) => s.start_date.Year == currentDate.Year && s.start_date.Month == currentDate.Month && s.start_date.Day == currentDate.Day);
                    if (foundGame != null)
                    {
                        defaultRegularWeek = foundGame.week;
                        break;
                    }

                    currentDate = currentDate.AddDays(1);
                    if (currentDate.Year > DateTime.Now.Year)
                    {
                        defaultRegularWeek = maxWeek;
                        break;
                    }
                }
            }
        }
        else
        {
            defaultRegularWeek = maxWeek;
        }


        List<Team> tempTeams = new List<Team>();
        foreach (var game in gamesRegularSeason)
        {
            var at = tempTeams.Where(s => s.id == game.away_id);
            if (at.Count() < 1)
                tempTeams.AddRange(teamsRegular.Where(s => s.id == game.away_id));

            at = tempTeams.Where(s => s.id == game.home_id);
            if (at.Count() < 1)
                tempTeams.AddRange(teamsRegular.Where(s => s.id == game.home_id));

            enabledDatesReg.Add(new DateTime(game.start_date.Year, game.start_date.Month, game.start_date.Day));
        }

        enabledDatesReg = enabledDatesReg.Distinct().ToList();
        teamsRegular.Clear();
        teamsRegular = tempTeams.OrderBy(s => s.school).ToList();
        tempTeams.Clear();


        gamesPostSeason = gamesPostSeason.OrderBy((s) => s.start_date).ToList();

        foreach (var game in gamesPostSeason)
        {
            var at = tempTeams.Where(s => s.id == game.away_id);
            if (at.Count() < 1)
                tempTeams.AddRange(teamsPost.Where(s => s.id == game.away_id));

            at = tempTeams.Where(s => s.id == game.home_id);
            if (at.Count() < 1)
                tempTeams.AddRange(teamsPost.Where(s => s.id == game.home_id));

            enabledDatesPost.Add(new DateTime(game.start_date.Year, game.start_date.Month, game.start_date.Day));
        }

        enabledDatesPost = enabledDatesPost.Distinct().ToList();
        teamsPost.Clear();
        teamsPost = tempTeams.OrderBy(s => s.school).ToList();
        tempTeams.Clear();

        regularSeasons = gamesRegularSeason.GroupBy((s) => s.season).Select((s) => s.Key).ToList();
        regularWeeks = gamesRegularSeason.GroupBy((s) => s.week).Select((s) => s.Key).ToList();

        postSeasons = gamesPostSeason.GroupBy((s) => s.season).Select((s) => s.Key).ToList();
        if (postSeasons.Count == 0)
        {
            postSeasons.Add(DateTime.Now.Year);
        }

        postWeeks.Add(1);
        conferences = teamsRegular.GroupBy((s) => s.conference).Select((s) => s.Key).ToList();
        divisions = teamsRegular.GroupBy((s) => s.division).Select((s) => s.Key).ToList();

        await LoadAPTop25(currentDate, "AP");

        LoadingPopupVisible = false;


        //StartTimer();

        //AlreadyLoaded = true;
    }

    private async Task LoadAPTop25(DateTime currentDate, string p_poll)
    {
        foreach (var game in gamesRegularSeason)
        {
            var rankingWeek = await Task.FromResult(regularRankings.Find((s) => s.week == defaultRegularWeek && s.season == game.season));

            if (rankingWeek != null)
            {
                var poll = await Task.FromResult(rankingWeek.polls.Find((s) => s.poll.Contains(p_poll)));

                if (poll != null)
                {

                    var t = await Task.FromResult(poll.ranks.Find((s) => (s.school == game.away_team || s.school == game.home_team) && game.season == currentDate.Year && game.week == defaultRegularWeek));
                    if (t != null)
                    {
                        top25APGamesRegularSeason.Add(game);
                    }
                }
            }
        }
    }

    public void Dispose()
    {
        gamesRegularSeason.Clear();
        gamesPostSeason.Clear();
        teamsRegular.Clear();
        teamsPost.Clear();
        regularRankings.Clear();
        postRankings.Clear();
        conferences.Clear();
        divisions.Clear();
        teamNames.Clear();
        regularSeasons.Clear();
        postSeasons.Clear();
        regularWeeks.Clear();
        postWeeks.Clear();
        records.Clear();
        top25APGamesRegularSeason.Clear();


        gamesRegularSeason = null;
        gamesPostSeason = null;
        teamsRegular = null;
        teamsPost = null;
        regularRankings = null;
        postRankings = null;
        conferences = null;
        divisions = null;
        teamNames = null;
        regularSeasons = null;
        postSeasons = null;
        regularWeeks = null;
        postWeeks = null;
        records = null;
        top25APGamesRegularSeason = null;

        gridRefRegular = null;
        gridRefPost = null;
        gridRefTop25 = null;

        GC.Collect(2, GCCollectionMode.Forced);

        Console.WriteLine("Diposed Called....");


    }

    public async void OnHtmlDataCellDecoration(DataGridHtmlDataCellDecorationEventArgs<Game> eventArgs)
    {
        if (eventArgs.FieldName == nameof(Game.home_points) || eventArgs.FieldName == nameof(Game.home_team))
        {
            if (eventArgs.DataItem.home_points > eventArgs.DataItem.away_points)
            {
                await Task.FromResult(eventArgs.CssClass += " font-weight-bold");
            }
        }

        if (eventArgs.FieldName == nameof(Game.away_points) || eventArgs.FieldName == nameof(Game.away_team))
        {
            if (eventArgs.DataItem.away_points > eventArgs.DataItem.home_points)
            {
                await Task.FromResult(eventArgs.CssClass += " font-weight-bold");
            }
        }
    }

    private void ShowModal(int? teamId, int? season)
    {
        this.teamSelectedId = teamId;
        this.seasonSelected = season;
        DetailPopupVisible = true;
    }


    private RenderFragment RenderTeamGridCell(Game context, bool ishomecolumn, List<Ranking> rankings)
    {

        var away_points = context.away_points;
        var home_points = context.home_points;
        string team = null;
        int? teamId = 0;
        string conference = null;
        string logo = null;
        string rank = null;
        string points = null;


        if (ishomecolumn)
        {
            var t = teamsRegular.Find(s => s.id == (context as Game).home_id);
            if (t != null)
            {
                if (t.logos != null && t.logos.Count > 0)
                    logo = t.logos[0];
            }
            team = (context as Game).home_team;
            teamId = (context as Game).home_id;
            conference = (context as Game).home_conference;
        }
        else
        {
            var t = teamsRegular.Find(s => s.id == (context as Game).away_id);
            if (t != null)
            {
                if (t.logos != null && t.logos.Count > 0)
                    logo = t.logos[0];
            }
            team = (context as Game).away_team;
            teamId = (context as Game).away_id;
            conference = (context as Game).away_conference;
        }

        if (string.IsNullOrWhiteSpace(conference))
        {
            conference = "NA";
        }

        if (string.IsNullOrWhiteSpace(logo))
        {
            logo = "blank.png";
        }


        var rankingWeek = rankings.Find((s) => s.week == (context as Game).week && s.season == (context as Game).season);

        if (rankingWeek != null)
        {
            var poll = rankingWeek.polls.Find((s) => s.poll.Contains("AP"));
            if (poll != null)
            {
                var t = poll.ranks.Find((s) => s.school == team);
                if (t != null)
                {
                    points = t.points.ToString();
                    points = $"{points}";
                    rank = t.rank.ToString();
                    rank = $"{rank}";

                }
            }
        }

        Record teamRecord = records.Find((s) => s.team == team && s.year == (context as Game).season);

        RenderFragment currentTeam;

        RenderFragment logo35wh =@<img width="35" height="35" src="@logo" id="@teamId" />;

        if (string.IsNullOrWhiteSpace(rank))
        {
            currentTeam = @<div><span style="color:darkgray;font-size:smaller">@rank</span>@team</div>;
        }
        else
        {
            currentTeam = @<div><span style="color:darkgray;font-size:smaller">(@rank)&nbsp;</span>@team</div>;
        }

        RenderFragment winLossRecord;

        if (teamRecord != null)
        {
            winLossRecord = @<div style="font-size:smaller;color:darkgray">(@teamRecord.total.wins-@teamRecord.total.losses)</div>;
        }
        else
        {
            winLossRecord = @<div style="font-size:smaller">(0-0)</div>;
        }

        RenderFragment conf = @<div style="font-size:smaller">@conference</div>;

        RenderFragment template =
        @<table style="border:none">
            <tr>
                <td style="border:none;">
                    @logo35wh
                </td>
                <td style="text-align:left;border:none;width:100%">
                    @currentTeam
                    @winLossRecord
                    @conf
                </td>
                <td style="text-align:left;border:none;width:100%">
                    <DxButton RenderStyle="ButtonRenderStyle.Light" Title="Click for team Schedule." IconCssClass="info" IconPosition="ButtonIconPosition.BeforeText" @onclick="(() => ShowModal(teamId, context.season))"></DxButton>
                </td>
            </tr>
        </table>;


        return template;
    }

    private RenderFragment GridMargin(string top, string bottom)
    {
        RenderFragment template = @<div style="margin-top:@top;margin-bottom:@bottom"></div>;

        return template;
    }
}
